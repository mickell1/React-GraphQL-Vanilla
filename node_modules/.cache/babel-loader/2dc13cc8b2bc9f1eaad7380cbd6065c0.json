{"ast":null,"code":"import _slicedToArray from \"/Users/mcrawford/Code/react-with-graphql-vanilla/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mcrawford/Code/react-with-graphql-vanilla/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nconst axiosGitHubGraphQL = axios.create({\n  baseURL: 'https://api.github.com/graphql',\n  headers: {\n    Authorization: \"bearer \".concat(process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN)\n  }\n});\nconst TITLE = 'React GraphQL GitHub Client';\nconst GET_ISSUES_OF_REPOSITORY = \"\\n  query ($organization: String!, $repository: String!) {\\n    organization(login: $organization) {\\n      name\\n      url\\n      repository(name: $repository) {\\n        name\\n        url\\n        issues(last: 5, states: [OPEN]) {\\n          edges {\\n            node {\\n              id\\n              title\\n              url\\n              reactions(last: 3) {\\n                edges {\\n                  node {\\n                    id\\n                    content\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      path: 'the-road-to-learn-react/the-road-to-learn-react',\n      organization: null,\n      errors: null\n    };\n\n    this.onChange = event => {\n      this.setState({\n        path: event.target.value\n      });\n    };\n\n    this.onSubmit = event => {\n      this.onFetchFromGitHub(this.state.path);\n      event.preventDefault();\n    };\n\n    this.onFetchFromGitHub = path => {\n      getIssuesOfRepository(path).then(queryResult => this.setState(resolveIssuesQuery(queryResult)));\n    };\n  }\n\n  componentDidMount() {\n    this.onFetchFromGitHub(this.state.path);\n  }\n\n  render() {\n    const _this$state = this.state,\n          path = _this$state.path,\n          organization = _this$state.organization,\n          errors = _this$state.errors;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, TITLE), React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"url\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Show open issues for https://github.com/\"), React.createElement(\"input\", {\n      id: \"url\",\n      type: \"text\",\n      value: path,\n      onChange: this.onChange,\n      style: {\n        width: '300px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Search\")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), organization ? React.createElement(Organization, {\n      organization: organization,\n      errors: errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"No information yet ...\"));\n  }\n\n}\n\nconst Organization = ({\n  organization,\n  errors\n}) => {\n  if (errors) {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Something went wrong:\"), errors.map(error => error.message).join(' '));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Issues from Organization:\"), React.createElement(\"a\", {\n    href: organization.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, organization.name)), React.createElement(Repository, {\n    repository: organization.repository,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }));\n};\n\nconst Repository = ({\n  repository\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 126\n  },\n  __self: this\n}, React.createElement(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 127\n  },\n  __self: this\n}, React.createElement(\"strong\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 128\n  },\n  __self: this\n}, \"In Repository:\"), React.createElement(\"a\", {\n  href: repository.url,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 129\n  },\n  __self: this\n}, repository.name)), React.createElement(\"ul\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 131\n  },\n  __self: this\n}, repository.issues.edges.map(issue => React.createElement(\"li\", {\n  key: issue.node.id,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 133\n  },\n  __self: this\n}, React.createElement(\"a\", {\n  href: issue.node.url,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 134\n  },\n  __self: this\n}, issue.node.title), React.createElement(\"ul\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 135\n  },\n  __self: this\n}, issue.node.reactions.edges.map(reaction => React.createElement(\"li\", {\n  key: reaction.node.id,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 137\n  },\n  __self: this\n}, reaction.node.content)))))));\n\nconst getIssuesOfRepository = path => {\n  const _path$split = path.split('/'),\n        _path$split2 = _slicedToArray(_path$split, 2),\n        organization = _path$split2[0],\n        repository = _path$split2[1];\n\n  return axiosGitHubGraphQL.post('', {\n    query: GET_ISSUES_OF_REPOSITORY,\n    variables: {\n      organization,\n      repository\n    }\n  });\n};\n\nconst resolveIssuesQuery = queryResult => () => ({\n  organization: queryResult.data.data.organization,\n  errors: queryResult.data.errors\n});\n\nexport default App;","map":{"version":3,"sources":["/Users/mcrawford/Code/react-with-graphql-vanilla/src/App.js"],"names":["React","Component","axios","axiosGitHubGraphQL","create","baseURL","headers","Authorization","process","env","REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN","TITLE","GET_ISSUES_OF_REPOSITORY","App","state","path","organization","errors","onChange","event","setState","target","value","onSubmit","onFetchFromGitHub","preventDefault","getIssuesOfRepository","then","queryResult","resolveIssuesQuery","componentDidMount","render","width","Organization","map","error","message","join","url","name","repository","Repository","issues","edges","issue","node","id","title","reactions","reaction","content","split","post","query","variables","data"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,kBAAkB,GAAGD,KAAK,CAACE,MAAN,CAAa;AACtCC,EAAAA,OAAO,EAAE,gCAD6B;AAEtCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,mBACXC,OAAO,CAACC,GAAR,CAAYC,sCADD;AADN;AAF6B,CAAb,CAA3B;AASA,MAAMC,KAAK,GAAG,6BAAd;AAEA,MAAMC,wBAAwB,ilBAA9B;;AA8BA,MAAMC,GAAN,SAAkBZ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1Ba,KAD0B,GAClB;AACNC,MAAAA,IAAI,EAAE,iDADA;AAENC,MAAAA,YAAY,EAAE,IAFR;AAGNC,MAAAA,MAAM,EAAE;AAHF,KADkB;;AAAA,SAW1BC,QAX0B,GAWfC,KAAK,IAAI;AAClB,WAAKC,QAAL,CAAc;AAAEL,QAAAA,IAAI,EAAEI,KAAK,CAACE,MAAN,CAAaC;AAArB,OAAd;AACD,KAbyB;;AAAA,SAe1BC,QAf0B,GAefJ,KAAK,IAAI;AAClB,WAAKK,iBAAL,CAAuB,KAAKV,KAAL,CAAWC,IAAlC;AAEAI,MAAAA,KAAK,CAACM,cAAN;AACD,KAnByB;;AAAA,SAqB1BD,iBArB0B,GAqBNT,IAAI,IAAI;AAC1BW,MAAAA,qBAAqB,CAACX,IAAD,CAArB,CAA4BY,IAA5B,CAAiCC,WAAW,IAC1C,KAAKR,QAAL,CAAcS,kBAAkB,CAACD,WAAD,CAAhC,CADF;AAGD,KAzByB;AAAA;;AAO1BE,EAAAA,iBAAiB,GAAG;AAClB,SAAKN,iBAAL,CAAuB,KAAKV,KAAL,CAAWC,IAAlC;AACD;;AAkBDgB,EAAAA,MAAM,GAAG;AAAA,wBACgC,KAAKjB,KADrC;AAAA,UACCC,IADD,eACCA,IADD;AAAA,UACOC,YADP,eACOA,YADP;AAAA,UACqBC,MADrB,eACqBA,MADrB;AAEP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKN,KAAL,CADF,EAGE;AAAM,MAAA,QAAQ,EAAE,KAAKY,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,OAAO,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDADF,EAIE;AACE,MAAA,EAAE,EAAC,KADL;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,KAAK,EAAER,IAHT;AAIE,MAAA,QAAQ,EAAE,KAAKG,QAJjB;AAKE,MAAA,KAAK,EAAE;AAAEc,QAAAA,KAAK,EAAE;AAAT,OALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAWE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXF,CAHF,EAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBF,EAmBIhB,YAAY,GACZ,oBAAC,YAAD;AAAc,MAAA,YAAY,EAAEA,YAA5B;AAA0C,MAAA,MAAM,EAAEC,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADY,GAGZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAtBJ,CADF;AA2BD;;AAxDyB;;AA2D5B,MAAMgB,YAAY,GAAG,CAAC;AAAEjB,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAAD,KAA8B;AACjD,MAAIA,MAAJ,EAAY;AACV,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,EAEGA,MAAM,CAACiB,GAAP,CAAWC,KAAK,IAAIA,KAAK,CAACC,OAA1B,EAAmCC,IAAnC,CAAwC,GAAxC,CAFH,CADF;AAMD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAEE;AAAG,IAAA,IAAI,EAAErB,YAAY,CAACsB,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BtB,YAAY,CAACuB,IAAzC,CAFF,CADF,EAKE,oBAAC,UAAD;AAAY,IAAA,UAAU,EAAEvB,YAAY,CAACwB,UAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF;AASD,CAnBD;;AAqBA,MAAMC,UAAU,GAAG,CAAC;AAAED,EAAAA;AAAF,CAAD,KACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AAAG,EAAA,IAAI,EAAEA,UAAU,CAACF,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA0BE,UAAU,CAACD,IAArC,CAFF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGC,UAAU,CAACE,MAAX,CAAkBC,KAAlB,CAAwBT,GAAxB,CAA4BU,KAAK,IAChC;AAAI,EAAA,GAAG,EAAEA,KAAK,CAACC,IAAN,CAAWC,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAG,EAAA,IAAI,EAAEF,KAAK,CAACC,IAAN,CAAWP,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA0BM,KAAK,CAACC,IAAN,CAAWE,KAArC,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGH,KAAK,CAACC,IAAN,CAAWG,SAAX,CAAqBL,KAArB,CAA2BT,GAA3B,CAA+Be,QAAQ,IACtC;AAAI,EAAA,GAAG,EAAEA,QAAQ,CAACJ,IAAT,CAAcC,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA4BG,QAAQ,CAACJ,IAAT,CAAcK,OAA1C,CADD,CADH,CAFF,CADD,CADH,CALF,CADF;;AAqBA,MAAMxB,qBAAqB,GAAGX,IAAI,IAAI;AAAA,sBACDA,IAAI,CAACoC,KAAL,CAAW,GAAX,CADC;AAAA;AAAA,QAC7BnC,YAD6B;AAAA,QACfwB,UADe;;AAGpC,SAAOrC,kBAAkB,CAACiD,IAAnB,CAAwB,EAAxB,EAA4B;AACjCC,IAAAA,KAAK,EAAEzC,wBAD0B;AAEjC0C,IAAAA,SAAS,EAAE;AAAEtC,MAAAA,YAAF;AAAgBwB,MAAAA;AAAhB;AAFsB,GAA5B,CAAP;AAID,CAPD;;AASA,MAAMX,kBAAkB,GAAGD,WAAW,IAAI,OAAO;AAC/CZ,EAAAA,YAAY,EAAEY,WAAW,CAAC2B,IAAZ,CAAiBA,IAAjB,CAAsBvC,YADW;AAE/CC,EAAAA,MAAM,EAAEW,WAAW,CAAC2B,IAAZ,CAAiBtC;AAFsB,CAAP,CAA1C;;AAMA,eAAeJ,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst axiosGitHubGraphQL = axios.create({\n  baseURL: 'https://api.github.com/graphql',\n  headers: {\n    Authorization: `bearer ${\n      process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN\n    }`,\n  },\n});\n\nconst TITLE = 'React GraphQL GitHub Client';\n\nconst GET_ISSUES_OF_REPOSITORY = `\n  query ($organization: String!, $repository: String!) {\n    organization(login: $organization) {\n      name\n      url\n      repository(name: $repository) {\n        name\n        url\n        issues(last: 5, states: [OPEN]) {\n          edges {\n            node {\n              id\n              title\n              url\n              reactions(last: 3) {\n                edges {\n                  node {\n                    id\n                    content\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nclass App extends Component {\n  state = {\n    path: 'the-road-to-learn-react/the-road-to-learn-react',\n    organization: null,\n    errors: null,\n  };\n\n  componentDidMount() {\n    this.onFetchFromGitHub(this.state.path);\n  }\n\n  onChange = event => {\n    this.setState({ path: event.target.value });\n  };\n\n  onSubmit = event => {\n    this.onFetchFromGitHub(this.state.path);\n\n    event.preventDefault();\n  };\n\n  onFetchFromGitHub = path => {\n    getIssuesOfRepository(path).then(queryResult =>\n      this.setState(resolveIssuesQuery(queryResult)),\n    );\n  };\n\n  render() {\n    const { path, organization, errors } = this.state;\n    return (\n      <div>\n        <h1>{TITLE}</h1>\n\n        <form onSubmit={this.onSubmit}>\n          <label htmlFor=\"url\">\n            Show open issues for https://github.com/\n          </label>\n          <input\n            id=\"url\"\n            type=\"text\"\n            value={path}\n            onChange={this.onChange}\n            style={{ width: '300px' }}\n          />\n          <button type=\"submit\">Search</button>\n        </form>\n\n        <hr />\n        {\n          organization ? (\n          <Organization organization={organization} errors={errors} />\n          ) : (\n          <p>No information yet ...</p>\n        )}\n      </div>\n    );\n  }\n}\n\nconst Organization = ({ organization, errors }) => {\n  if (errors) {\n    return (\n      <p>\n        <strong>Something went wrong:</strong>\n        {errors.map(error => error.message).join(' ')}\n      </p>\n    );\n  }\n\n  return (\n    <div>\n      <p>\n        <strong>Issues from Organization:</strong>\n        <a href={organization.url}>{organization.name}</a>\n      </p>\n      <Repository repository={organization.repository} />\n    </div>\n  );\n};\n\nconst Repository = ({ repository }) => (\n  <div>\n    <p>\n      <strong>In Repository:</strong>\n      <a href={repository.url}>{repository.name}</a>\n    </p>\n    <ul>\n      {repository.issues.edges.map(issue => (\n        <li key={issue.node.id}>\n          <a href={issue.node.url}>{issue.node.title}</a>\n          <ul>\n            {issue.node.reactions.edges.map(reaction => (\n              <li key={reaction.node.id}>{reaction.node.content}</li>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nconst getIssuesOfRepository = path => {\n  const [organization, repository] = path.split('/');\n\n  return axiosGitHubGraphQL.post('', {\n    query: GET_ISSUES_OF_REPOSITORY,\n    variables: { organization, repository },\n  });\n};\n\nconst resolveIssuesQuery = queryResult => () => ({\n  organization: queryResult.data.data.organization,\n  errors: queryResult.data.errors,\n});\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}