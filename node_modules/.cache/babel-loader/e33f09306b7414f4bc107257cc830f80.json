{"ast":null,"code":"import _objectSpread from \"/Users/mcrawford/Code/react-with-graphql-vanilla/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/mcrawford/Code/react-with-graphql-vanilla/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mcrawford/Code/react-with-graphql-vanilla/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nconst axiosGitHubGraphQL = axios.create({\n  baseURL: 'https://api.github.com/graphql',\n  headers: {\n    Authorization: \"bearer \".concat(process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN)\n  }\n});\nconst TITLE = 'React GraphQL GitHub Client';\nconst GET_ISSUES_OF_REPOSITORY = \"\\n  query ($organization: String!, $repository: String!, $cursor: String) {\\n    organization(login: $organization) {\\n      name\\n      url\\n      repository(name: $repository) {\\n        id\\n        name\\n        url\\n        stargazers {\\n          totalCount\\n        }\\n        viewerHasStarred\\n        issues(first: 5, after: $cursor, states: [OPEN]) {\\n          edges {\\n            node {\\n              id\\n              title\\n              url\\n              reactions(last: 3) {\\n                edges {\\n                  node {\\n                    id\\n                    content\\n                  }\\n                }\\n              }\\n            }\\n          }\\n          totalCount\\n          pageInfo {\\n            endCursor\\n            hasNextPage\\n          }\\n        }\\n      }\\n    }\\n  }\\n\";\nconst ADD_STAR = \"\\n  mutation ($repositoryId: ID!) {\\n    addStar(input:{starrableId:$repositoryId}) {\\n      starrable {\\n        viewerHasStarred\\n      }\\n    }\\n  }\\n\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      path: 'the-road-to-learn-react/the-road-to-learn-react',\n      organization: null,\n      errors: null\n    };\n\n    this.onChange = event => {\n      this.setState({\n        path: event.target.value\n      });\n    };\n\n    this.onSubmit = event => {\n      this.onFetchFromGitHub(this.state.path);\n      event.preventDefault();\n    };\n\n    this.onFetchFromGitHub = (path, cursor) => {\n      getIssuesOfRepository(path, cursor).then(queryResult => this.setState(resolveIssuesQuery(queryResult, cursor)));\n    };\n\n    this.onFetchMoreIssues = () => {\n      const endCursor = this.state.organization.repository.issues.pageInfo.endCursor;\n      this.onFetchFromGitHub(this.state.path, endCursor);\n    };\n\n    this.onStarRepository = (repositoryId, viewerHasStarred) => {\n      addStarToRepository(repositoryId).then(mutationResult => this.setState(resolveAddStarMutation(mutationResult)));\n    };\n  }\n\n  componentDidMount() {\n    this.onFetchFromGitHub(this.state.path);\n  }\n\n  render() {\n    const _this$state = this.state,\n          path = _this$state.path,\n          organization = _this$state.organization,\n          errors = _this$state.errors;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, TITLE), React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"url\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Show open issues for https://github.com/\"), React.createElement(\"input\", {\n      id: \"url\",\n      type: \"text\",\n      value: path,\n      onChange: this.onChange,\n      style: {\n        width: '300px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Search\")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), organization ? React.createElement(Organization, {\n      organization: organization,\n      errors: errors,\n      onFetchMoreIssues: this.onFetchMoreIssues,\n      onStarRepository: this.onStarRepository,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"No information yet ...\"));\n  }\n\n}\n\nconst Organization = ({\n  organization,\n  errors,\n  onFetchMoreIssues,\n  onStarRepository\n}) => {\n  if (errors) {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Something went wrong:\"), errors.map(error => error.message).join(' '));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"Issues from Organization:\"), React.createElement(\"a\", {\n    href: organization.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, organization.name)), React.createElement(Repository, {\n    repository: organization.repository,\n    onFetchMoreIssues: onFetchMoreIssues,\n    onStarRepository: onStarRepository,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }));\n};\n\nconst Repository = ({\n  repository,\n  onFetchMoreIssues,\n  onStarRepository\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 160\n  },\n  __self: this\n}, React.createElement(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 161\n  },\n  __self: this\n}, React.createElement(\"strong\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 162\n  },\n  __self: this\n}, \"In Repository:\"), React.createElement(\"a\", {\n  href: repository.url,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 163\n  },\n  __self: this\n}, repository.name)), React.createElement(\"button\", {\n  type: \"button\",\n  onClick: () => onStarRepository(repository.id, repository.viewerHasStarred),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 166\n  },\n  __self: this\n}, repository.stargazers.totalCount, repository.viewerHasStarred ? ' Unstar' : ' Star'), React.createElement(\"ul\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 174\n  },\n  __self: this\n}, repository.issues.edges.map(issue => React.createElement(\"li\", {\n  key: issue.node.id,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 176\n  },\n  __self: this\n}, React.createElement(\"a\", {\n  href: issue.node.url,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 177\n  },\n  __self: this\n}, issue.node.title), React.createElement(\"ul\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 178\n  },\n  __self: this\n}, issue.node.reactions.edges.map(reaction => React.createElement(\"li\", {\n  key: reaction.node.id,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 180\n  },\n  __self: this\n}, reaction.node.content)))))), React.createElement(\"hr\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 187\n  },\n  __self: this\n}), repository.issues.pageInfo.hasNextPage && React.createElement(\"button\", {\n  onClick: onFetchMoreIssues,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 190\n  },\n  __self: this\n}, \"More\"));\n\nconst getIssuesOfRepository = (path, cursor) => {\n  const _path$split = path.split('/'),\n        _path$split2 = _slicedToArray(_path$split, 2),\n        organization = _path$split2[0],\n        repository = _path$split2[1];\n\n  return axiosGitHubGraphQL.post('', {\n    query: GET_ISSUES_OF_REPOSITORY,\n    variables: {\n      organization,\n      repository,\n      cursor\n    }\n  });\n};\n\nconst resolveIssuesQuery = (queryResult, cursor) => state => {\n  const _queryResult$data = queryResult.data,\n        data = _queryResult$data.data,\n        errors = _queryResult$data.errors;\n\n  if (!cursor) {\n    return {\n      organization: data.organization,\n      errors\n    };\n  }\n\n  const oldIssues = state.organization.repository.issues.edges;\n  const newIssues = data.organization.repository.issues.edges;\n  const updatedIssues = [...oldIssues, ...newIssues];\n  return {\n    organization: _objectSpread({}, data.organization, {\n      repository: _objectSpread({}, data.organization.repository, {\n        issues: _objectSpread({}, data.organization.repository.issues, {\n          edges: updatedIssues\n        })\n      })\n    }),\n    errors\n  };\n};\n\nconst addStarToRepository = repositoryId => {\n  return axiosGitHubGraphQL.post('', {\n    query: ADD_STAR,\n    variables: {\n      repositoryId\n    }\n  });\n};\n\nconst resolveAddStarMutation = mutationResult => state => {\n  const viewerHasStarred = mutationResult.data.data.addStar.starrable.viewerHasStarred;\n  const totalCount = state.organization.repository.stargazers.totalCount;\n  return _objectSpread({}, state, {\n    organization: _objectSpread({}, state.organization, {\n      repository: _objectSpread({}, state.organization.repository, {\n        viewerHasStarred\n      })\n    })\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/mcrawford/Code/react-with-graphql-vanilla/src/App.js"],"names":["React","Component","axios","axiosGitHubGraphQL","create","baseURL","headers","Authorization","process","env","REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN","TITLE","GET_ISSUES_OF_REPOSITORY","ADD_STAR","App","state","path","organization","errors","onChange","event","setState","target","value","onSubmit","onFetchFromGitHub","preventDefault","cursor","getIssuesOfRepository","then","queryResult","resolveIssuesQuery","onFetchMoreIssues","endCursor","repository","issues","pageInfo","onStarRepository","repositoryId","viewerHasStarred","addStarToRepository","mutationResult","resolveAddStarMutation","componentDidMount","render","width","Organization","map","error","message","join","url","name","Repository","id","stargazers","totalCount","edges","issue","node","title","reactions","reaction","content","hasNextPage","split","post","query","variables","data","oldIssues","newIssues","updatedIssues","addStar","starrable"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst axiosGitHubGraphQL = axios.create({\n  baseURL: 'https://api.github.com/graphql',\n  headers: {\n    Authorization: `bearer ${\n      process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN\n    }`,\n  },\n});\n\nconst TITLE = 'React GraphQL GitHub Client';\n\nconst GET_ISSUES_OF_REPOSITORY = `\n  query ($organization: String!, $repository: String!, $cursor: String) {\n    organization(login: $organization) {\n      name\n      url\n      repository(name: $repository) {\n        id\n        name\n        url\n        stargazers {\n          totalCount\n        }\n        viewerHasStarred\n        issues(first: 5, after: $cursor, states: [OPEN]) {\n          edges {\n            node {\n              id\n              title\n              url\n              reactions(last: 3) {\n                edges {\n                  node {\n                    id\n                    content\n                  }\n                }\n              }\n            }\n          }\n          totalCount\n          pageInfo {\n            endCursor\n            hasNextPage\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst ADD_STAR = `\n  mutation ($repositoryId: ID!) {\n    addStar(input:{starrableId:$repositoryId}) {\n      starrable {\n        viewerHasStarred\n      }\n    }\n  }\n`;\n\nclass App extends Component {\n  state = {\n    path: 'the-road-to-learn-react/the-road-to-learn-react',\n    organization: null,\n    errors: null,\n  };\n\n  componentDidMount() {\n    this.onFetchFromGitHub(this.state.path);\n  }\n\n  onChange = event => {\n    this.setState({ path: event.target.value });\n  };\n\n  onSubmit = event => {\n    this.onFetchFromGitHub(this.state.path);\n\n    event.preventDefault();\n  };\n\n  onFetchFromGitHub = (path, cursor) => {\n    getIssuesOfRepository(path, cursor).then(queryResult =>\n      this.setState(resolveIssuesQuery(queryResult, cursor)),\n    );\n  };\n\n  onFetchMoreIssues = () => {\n    const {\n      endCursor,\n    } = this.state.organization.repository.issues.pageInfo;\n\n    this.onFetchFromGitHub(this.state.path, endCursor);\n  };\n\n  onStarRepository = (repositoryId, viewerHasStarred) => {\n    addStarToRepository(repositoryId).then(mutationResult =>\n      this.setState(resolveAddStarMutation(mutationResult)),\n    );\n  };\n\n  render() {\n    const { path, organization, errors } = this.state;\n    return (\n      <div>\n        <h1>{TITLE}</h1>\n\n        <form onSubmit={this.onSubmit}>\n          <label htmlFor=\"url\">\n            Show open issues for https://github.com/\n          </label>\n          <input\n            id=\"url\"\n            type=\"text\"\n            value={path}\n            onChange={this.onChange}\n            style={{ width: '300px' }}\n          />\n          <button type=\"submit\">Search</button>\n        </form>\n\n        <hr />\n        {\n          organization ? (\n          <Organization organization={organization} errors={errors} onFetchMoreIssues={this.onFetchMoreIssues} onStarRepository={this.onStarRepository} />\n          ) : (\n          <p>No information yet ...</p>\n        )}\n      </div>\n    );\n  }\n}\n\nconst Organization = ({ organization, errors, onFetchMoreIssues,  onStarRepository, }) => {\n  if (errors) {\n    return (\n      <p>\n        <strong>Something went wrong:</strong>\n        {errors.map(error => error.message).join(' ')}\n      </p>\n    );\n  }\n\n  return (\n    <div>\n      <p>\n        <strong>Issues from Organization:</strong>\n        <a href={organization.url}>{organization.name}</a>\n      </p>\n      <Repository repository={organization.repository} onFetchMoreIssues={onFetchMoreIssues} onStarRepository={onStarRepository} />\n    </div>\n  );\n};\n\nconst Repository = ({ repository, onFetchMoreIssues, onStarRepository, }) => (\n  <div>\n    <p>\n      <strong>In Repository:</strong>\n      <a href={repository.url}>{repository.name}</a>\n    </p>\n\n    <button\n      type=\"button\"\n      onClick={() => onStarRepository(repository.id, repository.viewerHasStarred)}\n    >\n      {repository.stargazers.totalCount}\n      {repository.viewerHasStarred ? ' Unstar' : ' Star'}\n    </button>\n\n    <ul>\n      {repository.issues.edges.map(issue => (\n        <li key={issue.node.id}>\n          <a href={issue.node.url}>{issue.node.title}</a>\n          <ul>\n            {issue.node.reactions.edges.map(reaction => (\n              <li key={reaction.node.id}>{reaction.node.content}</li>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </ul>\n\n    <hr />\n\n    {repository.issues.pageInfo.hasNextPage && (\n      <button onClick={onFetchMoreIssues}>More</button>\n    )}\n  </div>\n);\n\nconst getIssuesOfRepository = (path, cursor) => {\n  const [organization, repository] = path.split('/');\n\n  return axiosGitHubGraphQL.post('', {\n    query: GET_ISSUES_OF_REPOSITORY,\n    variables: { organization, repository, cursor },\n  });\n};\n\nconst resolveIssuesQuery = (queryResult, cursor) => state => {\n  const { data, errors } = queryResult.data;\n\n  if (!cursor) {\n    return {\n      organization: data.organization,\n      errors,\n    };\n  }\n\n  const { edges: oldIssues } = state.organization.repository.issues;\n  const { edges: newIssues } = data.organization.repository.issues;\n  const updatedIssues = [...oldIssues, ...newIssues];\n\n  return {\n    organization: {\n      ...data.organization,\n      repository: {\n        ...data.organization.repository,\n        issues: {\n          ...data.organization.repository.issues,\n          edges: updatedIssues,\n        },\n      },\n    },\n    errors,\n  };\n};\n\nconst addStarToRepository = repositoryId => {\n  return axiosGitHubGraphQL.post('', {\n    query: ADD_STAR,\n    variables: { repositoryId },\n  });\n};\n\nconst resolveAddStarMutation = mutationResult => state => {\n  const {\n    viewerHasStarred,\n  } = mutationResult.data.data.addStar.starrable;\n\n  const { totalCount } = state.organization.repository.stargazers;\n\n  return {\n    ...state,\n    organization: {\n      ...state.organization,\n      repository: {\n        ...state.organization.repository,\n        viewerHasStarred,\n      },\n    },\n  };\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}