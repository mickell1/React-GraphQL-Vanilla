{"ast":null,"code":"var _jsxFileName = \"/Users/mcrawford/Code/react-with-graphql-vanilla/src/App.js\";\nimport React, { Component } from 'react';\nimport { getIssuesOfRepository, resolveIssuesQuery } from './Functions/repositoryIssues';\nimport { addStarToRepository, resolveAddStarMutation, removeStarFromRepository, resolveRemoveStarMutation } from './Functions/gitStartHandlers';\nimport Organization from './Components/Organization';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      path: 'the-road-to-learn-react/the-road-to-learn-react',\n      organization: null,\n      errors: null\n    };\n\n    this.onChange = event => {\n      this.setState({\n        path: event.target.value\n      });\n    };\n\n    this.onSubmit = event => {\n      this.onFetchFromGitHub(this.state.path);\n      event.preventDefault();\n    };\n\n    this.onFetchFromGitHub = (path, cursor) => {\n      getIssuesOfRepository(path, cursor).then(queryResult => this.setState(resolveIssuesQuery(queryResult, cursor)));\n    };\n\n    this.onFetchMoreIssues = () => {\n      const endCursor = this.state.organization.repository.issues.pageInfo.endCursor;\n      this.onFetchFromGitHub(this.state.path, endCursor);\n    };\n\n    this.onStarRepository = (repositoryId, viewerHasStarred) => {\n      if (viewerHasStarred) {\n        removeStarFromRepository(repositoryId).then(mutationResult => this.setState(resolveRemoveStarMutation(mutationResult)));\n      } else {\n        addStarToRepository(repositoryId).then(mutationResult => this.setState(resolveAddStarMutation(mutationResult)));\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.onFetchFromGitHub(this.state.path);\n  }\n\n  render() {\n    const _this$state = this.state,\n          path = _this$state.path,\n          organization = _this$state.organization,\n          errors = _this$state.errors;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"React GraphQL GitHub Client\"), React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"url\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Show open issues for https://github.com/\"), React.createElement(\"input\", {\n      id: \"url\",\n      type: \"text\",\n      value: path,\n      onChange: this.onChange,\n      style: {\n        width: '300px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Search\")), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), organization ? React.createElement(Organization, {\n      organization: organization,\n      errors: errors,\n      onFetchMoreIssues: this.onFetchMoreIssues,\n      onStarRepository: this.onStarRepository,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"No information yet ...\"));\n  }\n\n} // const Organization = ({\n//   organization,\n//   errors,\n//   onFetchMoreIssues,\n//   onStarRepository,\n// }) => {\n//   if (errors) {\n//     return (\n//       <p>\n//         <strong>Something went wrong:</strong>\n//         {errors.map(error => error.message).join(' ')}\n//       </p>\n//     );\n//   }\n//   return (\n//     <div>\n//       <p>\n//         <strong>Issues from Organization:</strong>\n//         <a href={organization.url}>{organization.name}</a>\n//       </p>\n//       <Repository\n//         repository={organization.repository}\n//         onFetchMoreIssues={onFetchMoreIssues}\n//         onStarRepository={onStarRepository}\n//       />\n//     </div>\n//   );\n// };\n// const Repository = ({\n//   repository,\n//   onFetchMoreIssues,\n//   onStarRepository,\n// }) => (\n//   <div>\n//     <p>\n//       <strong>In Repository:</strong>\n//       <a href={repository.url}>{repository.name}</a>\n//     </p>\n//     <button\n//       type=\"button\"\n//       onClick={() =>\n//         onStarRepository(repository.id, repository.viewerHasStarred)\n//       }\n//     >\n//       {repository.stargazers.totalCount}\n//       {repository.viewerHasStarred ? ' Unstar' : ' Star'}\n//     </button>\n//     <ul>\n//       {repository.issues.edges.map(issue => (\n//         <li key={issue.node.id}>\n//           <a href={issue.node.url}>{issue.node.title}</a>\n//           <ul>\n//             {issue.node.reactions.edges.map(reaction => (\n//               <li key={reaction.node.id}>{reaction.node.content}</li>\n//             ))}\n//           </ul>\n//         </li>\n//       ))}\n//     </ul>\n//     <hr />\n//     {repository.issues.pageInfo.hasNextPage && (\n//       <button onClick={onFetchMoreIssues}>More</button>\n//     )}\n//   </div>\n// );\n\n\nexport default App;","map":{"version":3,"sources":["/Users/mcrawford/Code/react-with-graphql-vanilla/src/App.js"],"names":["React","Component","getIssuesOfRepository","resolveIssuesQuery","addStarToRepository","resolveAddStarMutation","removeStarFromRepository","resolveRemoveStarMutation","Organization","App","state","path","organization","errors","onChange","event","setState","target","value","onSubmit","onFetchFromGitHub","preventDefault","cursor","then","queryResult","onFetchMoreIssues","endCursor","repository","issues","pageInfo","onStarRepository","repositoryId","viewerHasStarred","mutationResult","componentDidMount","render","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,qBAAT,EAAgCC,kBAAhC,QAA0D,8BAA1D;AACA,SACEC,mBADF,EAEEC,sBAFF,EAGEC,wBAHF,EAIEC,yBAJF,QAKO,8BALP;AAMA,OAAOC,YAAP,MAAyB,2BAAzB;;AAEA,MAAMC,GAAN,SAAkBR,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BS,KAD0B,GAClB;AACNC,MAAAA,IAAI,EAAE,iDADA;AAENC,MAAAA,YAAY,EAAE,IAFR;AAGNC,MAAAA,MAAM,EAAE;AAHF,KADkB;;AAAA,SAW1BC,QAX0B,GAWfC,KAAK,IAAI;AAClB,WAAKC,QAAL,CAAc;AAAEL,QAAAA,IAAI,EAAEI,KAAK,CAACE,MAAN,CAAaC;AAArB,OAAd;AACD,KAbyB;;AAAA,SAe1BC,QAf0B,GAefJ,KAAK,IAAI;AAClB,WAAKK,iBAAL,CAAuB,KAAKV,KAAL,CAAWC,IAAlC;AAEAI,MAAAA,KAAK,CAACM,cAAN;AACD,KAnByB;;AAAA,SAqB1BD,iBArB0B,GAqBN,CAACT,IAAD,EAAOW,MAAP,KAAkB;AACpCpB,MAAAA,qBAAqB,CAACS,IAAD,EAAOW,MAAP,CAArB,CAAoCC,IAApC,CAAyCC,WAAW,IAClD,KAAKR,QAAL,CAAcb,kBAAkB,CAACqB,WAAD,EAAcF,MAAd,CAAhC,CADF;AAGD,KAzByB;;AAAA,SA2B1BG,iBA3B0B,GA2BN,MAAM;AAAA,YAEtBC,SAFsB,GAGpB,KAAKhB,KAAL,CAAWE,YAAX,CAAwBe,UAAxB,CAAmCC,MAAnC,CAA0CC,QAHtB,CAEtBH,SAFsB;AAKxB,WAAKN,iBAAL,CAAuB,KAAKV,KAAL,CAAWC,IAAlC,EAAwCe,SAAxC;AACD,KAjCyB;;AAAA,SAmC1BI,gBAnC0B,GAmCP,CAACC,YAAD,EAAeC,gBAAf,KAAoC;AACrD,UAAIA,gBAAJ,EAAsB;AACpB1B,QAAAA,wBAAwB,CAACyB,YAAD,CAAxB,CAAuCR,IAAvC,CAA4CU,cAAc,IACxD,KAAKjB,QAAL,CAAcT,yBAAyB,CAAC0B,cAAD,CAAvC,CADF;AAGD,OAJD,MAIO;AACL7B,QAAAA,mBAAmB,CAAC2B,YAAD,CAAnB,CAAkCR,IAAlC,CAAuCU,cAAc,IACnD,KAAKjB,QAAL,CAAcX,sBAAsB,CAAC4B,cAAD,CAApC,CADF;AAGD;AACF,KA7CyB;AAAA;;AAO1BC,EAAAA,iBAAiB,GAAG;AAClB,SAAKd,iBAAL,CAAuB,KAAKV,KAAL,CAAWC,IAAlC;AACD;;AAsCDwB,EAAAA,MAAM,GAAG;AAAA,wBACgC,KAAKzB,KADrC;AAAA,UACCC,IADD,eACCA,IADD;AAAA,UACOC,YADP,eACOA,YADP;AAAA,UACqBC,MADrB,eACqBA,MADrB;AAGP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADF,EAGE;AAAM,MAAA,QAAQ,EAAE,KAAKM,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,OAAO,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDADF,EAIE;AACE,MAAA,EAAE,EAAC,KADL;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,KAAK,EAAER,IAHT;AAIE,MAAA,QAAQ,EAAE,KAAKG,QAJjB;AAKE,MAAA,KAAK,EAAE;AAAEsB,QAAAA,KAAK,EAAE;AAAT,OALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAWE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXF,CAHF,EAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBF,EAmBGxB,YAAY,GACX,oBAAC,YAAD;AACE,MAAA,YAAY,EAAEA,YADhB;AAEE,MAAA,MAAM,EAAEC,MAFV;AAGE,MAAA,iBAAiB,EAAE,KAAKY,iBAH1B;AAIE,MAAA,gBAAgB,EAAE,KAAKK,gBAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADW,GAQX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCA3BJ,CADF;AAgCD;;AAlFyB,C,CAqF5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;AAEA,eAAerB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport { getIssuesOfRepository, resolveIssuesQuery } from './Functions/repositoryIssues';\nimport { \n  addStarToRepository, \n  resolveAddStarMutation, \n  removeStarFromRepository, \n  resolveRemoveStarMutation,\n} from './Functions/gitStartHandlers';\nimport Organization from './Components/Organization';\n\nclass App extends Component {\n  state = {\n    path: 'the-road-to-learn-react/the-road-to-learn-react',\n    organization: null,\n    errors: null,\n  };\n\n  componentDidMount() {\n    this.onFetchFromGitHub(this.state.path);\n  }\n\n  onChange = event => {\n    this.setState({ path: event.target.value });\n  };\n\n  onSubmit = event => {\n    this.onFetchFromGitHub(this.state.path);\n\n    event.preventDefault();\n  };\n\n  onFetchFromGitHub = (path, cursor) => {\n    getIssuesOfRepository(path, cursor).then(queryResult =>\n      this.setState(resolveIssuesQuery(queryResult, cursor)),\n    );\n  };\n\n  onFetchMoreIssues = () => {\n    const {\n      endCursor,\n    } = this.state.organization.repository.issues.pageInfo;\n\n    this.onFetchFromGitHub(this.state.path, endCursor);\n  };\n\n  onStarRepository = (repositoryId, viewerHasStarred) => {\n    if (viewerHasStarred) {\n      removeStarFromRepository(repositoryId).then(mutationResult =>\n        this.setState(resolveRemoveStarMutation(mutationResult)),\n      );\n    } else {\n      addStarToRepository(repositoryId).then(mutationResult =>\n        this.setState(resolveAddStarMutation(mutationResult)),\n      );\n    }\n  };\n\n  render() {\n    const { path, organization, errors } = this.state;\n\n    return (\n      <div>\n        <h1>React GraphQL GitHub Client</h1>\n\n        <form onSubmit={this.onSubmit}>\n          <label htmlFor=\"url\">\n            Show open issues for https://github.com/\n          </label>\n          <input\n            id=\"url\"\n            type=\"text\"\n            value={path}\n            onChange={this.onChange}\n            style={{ width: '300px' }}\n          />\n          <button type=\"submit\">Search</button>\n        </form>\n\n        <hr />\n\n        {organization ? (\n          <Organization\n            organization={organization}\n            errors={errors}\n            onFetchMoreIssues={this.onFetchMoreIssues}\n            onStarRepository={this.onStarRepository}\n          />\n        ) : (\n          <p>No information yet ...</p>\n        )}\n      </div>\n    );\n  }\n}\n\n// const Organization = ({\n//   organization,\n//   errors,\n//   onFetchMoreIssues,\n//   onStarRepository,\n// }) => {\n//   if (errors) {\n//     return (\n//       <p>\n//         <strong>Something went wrong:</strong>\n//         {errors.map(error => error.message).join(' ')}\n//       </p>\n//     );\n//   }\n\n//   return (\n//     <div>\n//       <p>\n//         <strong>Issues from Organization:</strong>\n//         <a href={organization.url}>{organization.name}</a>\n//       </p>\n//       <Repository\n//         repository={organization.repository}\n//         onFetchMoreIssues={onFetchMoreIssues}\n//         onStarRepository={onStarRepository}\n//       />\n//     </div>\n//   );\n// };\n\n// const Repository = ({\n//   repository,\n//   onFetchMoreIssues,\n//   onStarRepository,\n// }) => (\n//   <div>\n//     <p>\n//       <strong>In Repository:</strong>\n//       <a href={repository.url}>{repository.name}</a>\n//     </p>\n\n//     <button\n//       type=\"button\"\n//       onClick={() =>\n//         onStarRepository(repository.id, repository.viewerHasStarred)\n//       }\n//     >\n//       {repository.stargazers.totalCount}\n//       {repository.viewerHasStarred ? ' Unstar' : ' Star'}\n//     </button>\n\n//     <ul>\n//       {repository.issues.edges.map(issue => (\n//         <li key={issue.node.id}>\n//           <a href={issue.node.url}>{issue.node.title}</a>\n\n//           <ul>\n//             {issue.node.reactions.edges.map(reaction => (\n//               <li key={reaction.node.id}>{reaction.node.content}</li>\n//             ))}\n//           </ul>\n//         </li>\n//       ))}\n//     </ul>\n\n//     <hr />\n\n//     {repository.issues.pageInfo.hasNextPage && (\n//       <button onClick={onFetchMoreIssues}>More</button>\n//     )}\n//   </div>\n// );\n\nexport default App;"]},"metadata":{},"sourceType":"module"}