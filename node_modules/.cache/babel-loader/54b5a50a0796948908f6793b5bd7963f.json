{"ast":null,"code":"import _objectSpread from \"/Users/mcrawford/Code/react-with-graphql-vanilla/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/mcrawford/Code/react-with-graphql-vanilla/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport axiosGitHubGraphQL from '../Api/AUTH/gitAuth';\nimport GET_ISSUES_OF_REPOSITORY from '../Helpers/Organization';\n\nconst getIssuesOfRepository = (path, cursor) => {\n  const _path$split = path.split('/'),\n        _path$split2 = _slicedToArray(_path$split, 2),\n        organization = _path$split2[0],\n        repository = _path$split2[1];\n\n  return axiosGitHubGraphQL.post('', {\n    query: GET_ISSUES_OF_REPOSITORY,\n    variables: {\n      organization,\n      repository,\n      cursor\n    }\n  });\n};\n\nconst resolveIssuesQuery = (queryResult, cursor) => state => {\n  const _queryResult$data = queryResult.data,\n        data = _queryResult$data.data,\n        errors = _queryResult$data.errors;\n\n  if (!cursor) {\n    return {\n      organization: data.organization,\n      errors\n    };\n  }\n\n  const oldIssues = state.organization.repository.issues.edges;\n  const newIssues = data.organization.repository.issues.edges;\n  const updatedIssues = [...oldIssues, ...newIssues];\n  return {\n    organization: _objectSpread({}, data.organization, {\n      repository: _objectSpread({}, data.organization.repository, {\n        issues: _objectSpread({}, data.organization.repository.issues, {\n          edges: updatedIssues\n        })\n      })\n    }),\n    errors\n  };\n};\n\nexport { getIssuesOfRepository, resolveIssuesQuery };","map":{"version":3,"sources":["/Users/mcrawford/Code/react-with-graphql-vanilla/src/Functions/repositoryIssues.js"],"names":["axiosGitHubGraphQL","GET_ISSUES_OF_REPOSITORY","getIssuesOfRepository","path","cursor","split","organization","repository","post","query","variables","resolveIssuesQuery","queryResult","state","data","errors","oldIssues","issues","edges","newIssues","updatedIssues"],"mappings":";;AAAA,OAAOA,kBAAP,MAA+B,qBAA/B;AACA,OAAOC,wBAAP,MAAqC,yBAArC;;AAEA,MAAMC,qBAAqB,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAAA,sBACXD,IAAI,CAACE,KAAL,CAAW,GAAX,CADW;AAAA;AAAA,QACvCC,YADuC;AAAA,QACzBC,UADyB;;AAG9C,SAAOP,kBAAkB,CAACQ,IAAnB,CAAwB,EAAxB,EAA4B;AACjCC,IAAAA,KAAK,EAAER,wBAD0B;AAEjCS,IAAAA,SAAS,EAAE;AAAEJ,MAAAA,YAAF;AAAgBC,MAAAA,UAAhB;AAA4BH,MAAAA;AAA5B;AAFsB,GAA5B,CAAP;AAID,CAPD;;AASA,MAAMO,kBAAkB,GAAG,CAACC,WAAD,EAAcR,MAAd,KAAyBS,KAAK,IAAI;AAAA,4BAClCD,WAAW,CAACE,IADsB;AAAA,QACnDA,IADmD,qBACnDA,IADmD;AAAA,QAC7CC,MAD6C,qBAC7CA,MAD6C;;AAG3D,MAAI,CAACX,MAAL,EAAa;AACX,WAAO;AACLE,MAAAA,YAAY,EAAEQ,IAAI,CAACR,YADd;AAELS,MAAAA;AAFK,KAAP;AAID;;AAR0D,QAU5CC,SAV4C,GAU9BH,KAAK,CAACP,YAAN,CAAmBC,UAAnB,CAA8BU,MAVA,CAUnDC,KAVmD;AAAA,QAW5CC,SAX4C,GAW9BL,IAAI,CAACR,YAAL,CAAkBC,UAAlB,CAA6BU,MAXC,CAWnDC,KAXmD;AAY3D,QAAME,aAAa,GAAG,CAAC,GAAGJ,SAAJ,EAAe,GAAGG,SAAlB,CAAtB;AAEA,SAAO;AACLb,IAAAA,YAAY,oBACPQ,IAAI,CAACR,YADE;AAEVC,MAAAA,UAAU,oBACLO,IAAI,CAACR,YAAL,CAAkBC,UADb;AAERU,QAAAA,MAAM,oBACDH,IAAI,CAACR,YAAL,CAAkBC,UAAlB,CAA6BU,MAD5B;AAEJC,UAAAA,KAAK,EAAEE;AAFH;AAFE;AAFA,MADP;AAWLL,IAAAA;AAXK,GAAP;AAaD,CA3BD;;AA6BA,SACEb,qBADF,EAEES,kBAFF","sourcesContent":["import axiosGitHubGraphQL from '../Api/AUTH/gitAuth';\nimport GET_ISSUES_OF_REPOSITORY from '../Helpers/Organization';\n\nconst getIssuesOfRepository = (path, cursor) => {\n  const [organization, repository] = path.split('/');\n\n  return axiosGitHubGraphQL.post('', {\n    query: GET_ISSUES_OF_REPOSITORY,\n    variables: { organization, repository, cursor },\n  });\n};\n\nconst resolveIssuesQuery = (queryResult, cursor) => state => {\n  const { data, errors } = queryResult.data;\n\n  if (!cursor) {\n    return {\n      organization: data.organization,\n      errors,\n    };\n  }\n\n  const { edges: oldIssues } = state.organization.repository.issues;\n  const { edges: newIssues } = data.organization.repository.issues;\n  const updatedIssues = [...oldIssues, ...newIssues];\n\n  return {\n    organization: {\n      ...data.organization,\n      repository: {\n        ...data.organization.repository,\n        issues: {\n          ...data.organization.repository.issues,\n          edges: updatedIssues,\n        },\n      },\n    },\n    errors,\n  };\n};\n\nexport {\n  getIssuesOfRepository,\n  resolveIssuesQuery,\n}"]},"metadata":{},"sourceType":"module"}